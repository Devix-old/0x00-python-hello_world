=============================
The ``7-base_geometry`` module
=============================

Using ``BaseGeometry``
---------------------

Import the class:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now test it:

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_number", 42)

>>> bg.integer_validator("length", 67)

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("value", "Alice")
Traceback (most recent call last):
TypeError: value must be an integer

>>> bg.integer_validator("count", -3)
Traceback (most recent call last):
ValueError: count must be greater than 0

>>> bg.integer_validator("score", 5.5)
Traceback (most recent call last):
TypeError: score must be an integer

>>> bg.integer_validator("price")
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("temperature", float('nan'))
Traceback (most recent call last):
TypeError: temperature must be an integer

>>> bg.integer_validator("quantity", 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)

>>> bg.integer_validator("age", (2,))
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("length", [6])
Traceback (most recent call last):
TypeError: length must be an integer

>>> bg.integer_validator("height", True)
Traceback (most recent call last):
TypeError: height must be an integer

>>> bg.integer_validator("width", {1, 2, 3})
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("size", None)
Traceback (most recent call last):
TypeError: size must be an integer
